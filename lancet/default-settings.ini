# Dotted import paths values in this file represent factories for objects.
# Generally those are Pythons paths to callables which are called with the
# current `Lancet` object as the only argument.


[lancet]
# Directory holding project-specific directories.
workspace = ~/workspace

# Path to the Python virtual environment (the directory containing the
# bin/activate script).
virtualenv = 

# Additional paths to add to the import path (for example to add custom
# commands from non-standard locations).
# Use a multiline entry to specify multiple paths.
add_to_path = 

# A DSN to Sentry. If provided, exceptions will be logged remotely for further
# debugging.
sentry_dsn = 


[commands]
activate = lancet.commands.workflow.activate
workon = lancet.commands.workflow.workon
time = lancet.commands.workflow.time
pause = lancet.commands.workflow.pause
resume = lancet.commands.workflow.resume
_project_keys = lancet.commands.workflow._project_keys
_project_dirs = lancet.commands.workflow._project_dirs

setup = lancet.commands.configuration.setup
init = lancet.commands.configuration.init
logout = lancet.commands.configuration.logout
_services = lancet.commands.configuration._services

harvest-projects = lancet.commands.harvest.projects
harvest-tasks = lancet.commands.harvest.tasks

pull-request = lancet.commands.repository.pull_request
checkout = lancet.commands.repository.checkout

browse = lancet.commands.jira.browse


[alias]
# Custom aliases. Aliases prefixed with a ! will be treated as shell commands
# and executed in a subshell
co = checkout
pr = pull-request


[tracker]
# Status an issue has to be in to be considered as actively worked on.
active_status = In Progress

# Status an issue has to be in to be considered on hold/blocked.
paused_status = On Hold

# Status an issue has to be in when awaiting review
review_status = Ready to review

# Key used on the issue tracker to uniquely identify the project.
default_project = 

# Base URL of the issue tracker (in the form https://<company>.atlassian.net).
url = 

# Username to access the issue tracker (lancet will prompt for the password and
# securely store it in the system keychain).
username = 

# Location of a Jinja2 template to create the release notes content displayed
# in the editor.
# See the notes for the `pr_template` setting for the format of this value.
release_notes_template = lancet:templates/release-notes.md


[harvest]
# Base URL to access harvest (in the form https://<company>.harvestapp.com),
url = 

# Username to access the harvest (lancet will prompt for the password and
# securely store it in the system keychain).
username = 

# Project ID getter
project_id_getter = lancet.harvest.mapped_project_id_getter

# Single numeric ID of the project on harvest.
# Optionally can also be defined as a comma separated mapping of issue types to
# project IDs. For example: "4702716,Support CR:4702716,Support Bug:897329".
project_id = 

# Task ID getter
task_id_getter = lancet.harvest.fixed_task_id_getter

# Numeric ID of the main task ('Programming', in the normal case) on harvest.
task_id = 


[repository]
# Base branch on which base working branches.
base_branch = master

# Name of the git remote to use for remote operations.
remote_name = origin

# Branch naming convention
branch_name_getter = lancet.git.prefixed_id_branch_name

# Prefix for branches. This works as for the `project_id` setting documented
# above (different task types can have different prefixes).
branch_name_prefix = feature/

# Location of a Jinja2 template to create the pull requests content displayed
# in the editor.
# For support of applications that package themselves into .egg files, the
# value can also be specified as a package resource, in which case
# resource_string() is used to get the template. Any non-absolute URI which
# contains colons is interpreted here as a resource name, rather than a
# straight filename.
pr_template = lancet:templates/pull-request.txt


[github]
# Base URL to GitHub (needs to be changed only for enterprise accounts)
url = https://github.com

# Username used to access GitHub (lancet will prompt for the password and only
# store an access token in the system keychain).
username =


[dploi]
deployment_spec = deployment.py


[packaging]
contributors_template = lancet:templates/contributors.rst
version_tag_name = v{version}
version_tag_message = {name} release version {version}
